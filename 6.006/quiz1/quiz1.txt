Quiz 1 6.006
Ethan Fulbright

==============
FINAL GRADE 75
==============

1   [2/2 points]   
    Wrote my name.

2   [8/20 points]
[-7].a f1, f3, f8, f7, f5, f6, f4, f2
    .b O(n log n)
[-5].c Theta(log log log n) - the height of the recurrence tree is log log n because
        the size of the problem at step i is n^(1/2^i). Since each step takes log n
        work, we have log n work being done log log n times = Theta(log log log n)

3   [10/18 points]
[-2].a T
    .b T
    .c F
[-2].d F
    .e F
    .f F
[-2].g T
[-2].h T
    .i T

4   [15/20 points]
[-5].a Theta(log mn), because each step cuts the problem size in half.
    .b No. It's possible for the algorithm to return an incorrect answer.
        Consider this (slightly altered) input matrix:
            0 0 0 0 0       0 0 0
            4 5 0 0 0       4 5 0
            0 0 1 2 0   ->  0 0 1   -> Returns 2 as a peak. 2 is NOT a peak.
            0 0 0 0 0       0 0 0
            0 1 2 7 0       0 1 2

    Col 1,3,5 - max 4   ->  Row 1 3 5 - max 2, no larger neighbors -> return 2.

5   [15/20 points]
    .a Since we have n cities and k contaminated, at minimum, the decision tree must
        have (n!) / k!(n-k)! leaves, because there are that many k-element subsets of
        n. Since at level i of a binary tree there are 2^i children, the bottom level
        of the tree must be at height i such that 2^i >= (n!) / k!(n-k)!. Otherwise it
        won't cover all possible outcomes (i.e., we could miss contaminated cities).

        We'll be splitting the cities into k groups of n/k cities each, then dividing
        them in half after each test (as well as discarding the groups that test
        negative). This means that at each level of the tree there will be (at worst)
        2^ik groups of n/2^ik cities each.
        Since the algorithm must stop, we must eventually (in the worst case) examine
        single cities. That is, the bottom level of the tree is the level at which
        n/2^ik (the size of each testing group) equals 1. n/2^ik = 1 when i = log n/k,
        so there are log n/k levels of the tree. At each level we perform k tests, 
        meaning that the lower bound is Omega(k lg (n/k))
        
    .b  Split the cities into k groups of n/k cities each.
        Test all remaining groups.
        Discard groups that test negative.
        Divide groups that test positive in half (that is, after i tests, the groups
        contain n/2^ik cities).
        Repeat until all k contaminated cities are identified.

        At each level of the tree we're doing k tests, and the height of the tree is
        log n (since at worst the problem is divided in half at each level), so the
        algorithm is O(k lg n). T(n) = k*T(n/2) + O(1).

6   [20/20 points]
    .a 
        init(n, k, p): # O(k * n^k)
            h = new hash table # O(1)

            for multiset in MULTISETS(k, p): # O(k * n^k)
                Add up prices of items in the current multiset. # O(k)
                Store the multiset in the hash table, with a key equal to its
                total price. # O(1)

        bag(s): # O(1)
            Look up s in hash table. # O(1)
                If result found, return the first multiset in the result chain (since any
                collisions all sum to the same price, we can return any one of them). 
                # O(1)
                
                If no result found, return None. # O(1)

    .b  Since k is guaranteed to be even, you can divide it by 2, do half the work, and
        then have Ben buy two of whatever multiset you return! Clever.
        
        pwn-contest(n, s, k, p):
            h = new hash table # O(1)

            for multiset in MULTISETS(k/2, p): # O(k/2 * n^k/2)
                Add up prices of items in the current multiset. # O(k/2)
                Store the multiset in the hash table with a key equal to its
                total price. # O(1)

            Look up s/2 in hash table. # O(1)
                If result found, return 2 * the first multiset in the result chain.
                We're returning the set*2 because k is guaranteed to be even,
                allowing us to simply buy the smaller multiset twice in order to
                reach price s. # O(1)

                If no result found, return None. # O(1)


    .c  See pseudocode comments for analysis.

7   [20/20 points]
    .a  MA = []
        smallest_seen = A[0]
        MA[0] = smallest_seen
        for i in range(1, len(A)):
            if A[i] < smallest_seen:
                smallest_seen = A[i]
            MA[i] = smallest_seen

    .b  Basically, we're going to step through A, searching at each step in MA for an
        element larger than the current member of A we're looking at. Once we find a
        larger element (or can go no further left in MA, the index in MA is also the
        farthest index in A that is still less than our current A element.)

        largest_span = 0                        # O(1)
        
        left = 0                                # O(1)
        right = len(MA)                         # O(1)
        for i in range(len(A)):                 # O(n) (length of A)
            while left != right:                    # O(log n) (Binary search)
                middle = left + right // 2              # O(1)

                if MA[middle] <= A[i]:                  # O(1)
                    right = middle - 1                  # O(1)
                if MA[middle] > A[i]:                   # O(1)
                    left = middle + 1                   # O(1)
            
            # Account for the fact that the final search location hasn't
            # actually been compared to A[i].
            if MA[right] > A[i]:                    # O(1)
                right += 1                          # O(1)

            if i - right > largest_span:            # O(1)
                largest_span = i - right            # O(1)
        
        return largest_span                     # O(1)

        Total runtime O(n log n)