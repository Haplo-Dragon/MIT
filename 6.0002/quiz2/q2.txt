Quiz 2
==============
FINAL GRADE 84
==============

1
    .1 T
    .2 F
    .3 F
    .4 T
    .5 F 
2
    .1
        tots[0] = 100,000
        tots[1] = 100,000 +- approx. 40,000, with a 95% CI
        tots[2] = 100,000 +- approx. 80,000, with a 95% CI
    .2 T
[X] .3 F
    .4 T
3
    Top right is y2 (y = 2x)
    Top left is y4
    Bottom right is y3
    Bottom left is y1 (y = x^2 / 50)
4 [X]
    Rectangle with area 6.0
    Rectangle with area 6.0
    Circle with diameter 2.0
5
    import random


    def simThrows(numFlips):
        flips = []
        found_four_heads = False

        # Flip a coin numFlips times (H = heads, T = tails)
        for i in range(numFlips):
            # OUCH. Forgot to give random.choice a list
            # it should be:
            # flips.append(random.choice(["H", "T"]))
            flips.append(random.choice("H", "T"))

        # Check for four consecutive heads
        flips_string = ''.join(flips)
        if "HHHH" in flips_string:
            found_four_heads = True

        return found_four_heads


    def sim():
        num_four_heads = 0
        numTrials = 10000

        for i in range(numTrials):
            # Flip coin 10 times, find out if it contains 4 consecutive heads
            contains_four_heads = simThrows(10)

            # Keep track of how many times 4 consecutive heads are generated
            if contains_four_heads:
                num_four_heads += 1

        # Return approximate probability of 4 consecutive heads
        return num_four_heads / numTrials

6
    Yes, the (n+1)th degree polynomial will have a least squares fit that is at least as
    good as the nth polynomial. This is because a higher-degree polynomial fit to the same
    data will have follow the data points (noise included) more closely, reducing the least
    squares distance. The (n+1)th may be overfit, however, and be unsuitable for prediction.
7
    data abstraction    =   F - specification
    merge sort          =   B - divide and conquer
    polymorphism        =   A - inheritance
[X] hashing             =   G - mutability